Keytar Hero Setup Instructions


1. Install Debian on your Raspberry Pi. At the time of this writing the OS version was “Buster”. If newer versions of Debian have come out, it may mean that you’ll need to find libraries/executables compiled specifically for the newer OS if they are not behaving correctly. 
   1. On your Windows/Mac (or whatever you’re using to download files) go to https://www.raspberrypi.org/downloads/raspbian/  and download the version that says “Raspbian Buster with desktop and recommended software”. (If you’re an advanced user, you can do a more vanilla install if you want. I like this version because it includes several IDEs that you can use to code etc). From here follow the instructions on this page to burn the disk image for the Raspberry Pi onto an SD card: 
https://www.raspberrypi.org/documentation/installation/installing-images/README.md   (Note: there are a variety of apps available to burn the image onto an SD and they all do about the same thing. On my windows machine I used Win32DiskImager.)


2. Setup Raspberry Pi. 
   1. Put the SD card into your Raspberry Pi and start it up.
   2. Most of the setup is automatic, but at the very minimum you should:
      1. During install you can opt for whether you want the pi to launch into desktop or command line when it boots up. It doesn’t really matter which you choose. You can always change it later. I chose Desktop for mine. If you choose command line on boot and decide you want to run the Desktop, just type startx in the shell and it will launch the Desktop.
      2. Set a username/password
      3. Link it to your WiFi (it will prompt you during the first boot up, but you can always click on the WiFi symbol on the upper toolbar and manually enter it later if you miss it.
3. Set up i2c connections on RPi. The guitar controller is an i2c device so we’ll need to setup the i2c on our machine.
   1. Install python libraries for i2c. In a shell type:
      1. sudo apt-get install -y python-smbus
      2. sudo apt-get install -y i2c-tools
   2. Type sudo raspi-config  and go to Interfacing Options->Advanced->I2C to enable i2c
   3. Type sudo reboot
   4. The default i2c baud rate on the raspberry pi is too fast for pure data’s net receive and can cause data overruns if you don’t change it:
      1. In a shell type: sudo nano /boot/config.txt
      2. Arrow down to the section for optional hardware interfaces. Make sure you have these three lines in there (if they don’t exist, add them. If they do exist, make sure you’re using the values below):
dtparam=i2c_arm=on
dtparam=i2c1=on
dtparam=i2c1_baudrate=50000
      3. Then is Ctrl+O to save it and Ctrl+X to exit.
   Iv.        sudo reboot
        

4. Connect guitar and test
   1. There are six wires in the cable that comes out of the guitar. You only need four of them for the i2c connection (3.3v, Gnd, Clk, and Data). The easiest way to access those lines is to buy a breakout board that plugs into the nunchuck socket such as the nunchucky from Adafruit (https://www.adafruit.com/product/345) . Just solder on four header pins and your ready to connect it to your Pi. Alternatively, if you don’t want to use the nunchucky, you can always cut the socket off and use the wires from the guitar directly, you just have to google to find out which wire is which...
   2. Connect the guitar to the Raspberry Pi’s GPIO pins as follows:
      1. Pin 1-  3.3v
      2. Pin 3- Data (SDL)
      3. Pin 5- Clk (SCL)
      4. Pin 9- Gnd
   3. In a shell type sudo i2cdetect -y 1  which will search for i2c connected devices. It should show you an entry for 52 in the x slot. If so the Raspberry Pi can see the guitar.


5. Install Pure Data
   1. Run sudo apt-get install puredata
   2. Switch the audio to Jack.
   3. If possible install PDextended. This gives Pure Data a lot more functionality to make a wider range of sounds and fx.  (The built I found was built for the Wheezy OS version and didn’t appear to work for me. I’m still including the instructions for that are below but I’ll need to revisit to see if I can get this working.):
      1. sudo nano /etc/apt/sources.list
      2. Paste this line into that file: deb-src http://archive.raspbian.org/raspbian wheezy main contrib non-free rpi
      3. ctrl+o, Enter (to save). ctrl+x (to exit)
      4. sudo apt-get update
      5. wget https://puredata.info/downloads/pd-extended-0-43-3-on-raspberry-pi-raspbian-wheezy-armhf/releases/1.0/Pd-0.43.3-extended-20121004.deb
      6. sudo dpkg -i Pd-0.43.3-extended-20121004.deb
      7. sudo apt-get -f install
      8. sudo chmod 4755 /usr/bin/pd-extended
   4. This should have installed Pure Data on your Pi. You can try and run it by going to the Start menu and then Sound->Pure Data. 
      1. File->Open and open the oscillatorTest.pd file. Make sure the DSP is checked in Pure Data’s console window or you won’t hear anything. You should hear a tone. Dragging on the number will change the frequency.



6. Download the libraries and Pure Data patch here: <add github>
   1. You can put the two python scripts in whatever directory you want but it’s easiest if they’re in the same directory as each other. The wiiGHController.py is the library for reading the guitar’s values and the keytarHero.py script is you’ll run to launch everything. 
   2. The keytarHero.pd file is the Pure Data patch. The easiest thing is to put it in a directory like so: /home/pi/Documents/Pd/keytarHero.pd  since that’s the path used in the scripts, but if you want to put it somewhere else you’ll need to change the PD_PATCH_PATH variable in the keytarHero.py script to your path.


7. Fire it Up!
   1. To run the script you can cd to where the script lives and run python keytarHero.py . If everything worked you should see Pure Data launch and then load the patch and you’ll hear the music playing. 
   2. The controls on the guitar are set up to play in Pd patch as follows:
      1. Fret buttons: each one plays a different 16 note sequence
      2. Strum button: Pressed down plays the sequence forward, pressed up plays it backwards
      3. Whammy bar: pauses sequence playback and holds on a single note
      4. Joystick: The x-axis controls the cutoff frequency for a low pass filter. The y-axis controls a detune effect on a second oscillator
      5. Plus/Minus buttons: Play the sequence faster or slower. Default is 120 bpm and each button press increases/decreases by 10 bpm


8. A Tour of the Pd Patch
   1. You can modify the patch to play whatever you want, so here’s the key areas of the patch.
      1. In the top left there is a loadbang which sends out a signal when the patch is launched such as turning on computer audio, starting the sequence and initializing some variables.
      2. In the upper right are the nodes that manage the incoming connection from the guitar. Then convert the string signal of controller values to send signals the rest of the patch can understand. Probably best not to modify these if you’re using the guitar controller as they took a while to figure out. At the bottom of that part of the tree each controller component has a ‘send’ node which emits a signal you can use in other parts of the patch (i.e. ‘s whammy’ sends the whammy bar values out). To use the signal create a ‘receive’ node (i.e. ‘r whammy’) to catch the values and drive things in your patch.
      3. The middle area of the patch controls the sequencer. On the left side where the bar with the moving back square is controls how many steps in the sequence and how fast it’s going. The right side has five boxes with a series of numbers which set which notes to play. These numbers are midi values which can be set from 0 127.
      4. The bottom section is where the sound generation actually happens. It has two oscillators that pass through a mix node to mix them together and then through a low pass filter node. The joystick receive nodes pipe into parts of this to control the effects.


9. Troubleshooting
   1. If things aren’t working here some things to check:
   2. Is the guitar emitting a signal? The guitar controller code should be printing a line to the shell with the signal it’s emitting. Pressing the buttons or using the other controls should change these numbers. If that is happening then the controller is working okay. If not, check your i2c setup again as shown above and make sure your connector is wired to the appropriate pins/no bad connections etc.
   3. Is Pure Data audio turned on? The keytarHero patch provided should automatically turn on the audio output but check the DSP checkbox on Pure Data’s console. It should be checked. Also make sure that your audio setting is using Jack as the output.
   4. Is Pure Data receiving the signal from the guitar? In the upper right of the keytarHero.pd patch, there are nodes that receive the signal from the guitar. When you press a button on the guitar, it should change the numbers in this section accordingly.
   5. Initializing variables in the patch. Pure Data can be a bit finicky about values in the patch not being initialized (basically turned on). I’ve added mechanisms to trigger variables when it opens but it might be worth just clicking some of the message boxes in the patch (the ones with the half circle right side). This sometimes causes them to activate properly.


Other potentially useful info:


Guitar hero i2c mapping:
http://wiibrew.org/wiki/Wiimote/Extension_Controllers/Guitar_Hero_%28Wii%29_Guitars


I2c info:
https://learn.adafruit.com/circuitpython-basics-i2c-and-spi/i2c-devices